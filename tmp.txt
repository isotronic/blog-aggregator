diff --git a/handlers.go b/handlers.go
index c9ca5d1..3206a53 100644
--- a/handlers.go
+++ b/handlers.go
@@ -3,7 +3,6 @@ package main
 import (
 	"context"
 	"fmt"
-	"log"
 	"strings"
 	"time"
 
@@ -32,7 +31,7 @@ func registerHandler(s *state, cmd command) error {
 		return err
 	}
 
-	log.Printf("User created: %v\n", newUser)
+	fmt.Printf("User created: %v\n", newUser)
 	return nil
 }
 
@@ -54,7 +53,7 @@ func loginHandler(s *state, cmd command) error {
 		return err
 	}
 
-	log.Printf("Logged in as %s\n", user.Name)
+	fmt.Printf("Logged in as %s\n", user.Name)
 	return nil
 }
 
@@ -65,12 +64,12 @@ func usersHandler(s *state, cmd command) error {
 	}
 
 	loggedIn := ""
-	log.Println("Users:")
+	fmt.Println("Users:")
 	for _, user := range users {
 		if user.Name == s.cfg.CurrentUserName {
 			loggedIn = "(current)"
 		}
-		fmt.Printf("* %v %v\n", user.Name, loggedIn)
+		fmt.Printf(" * %v %v\n", user.Name, loggedIn)
 		loggedIn = ""
 	}
 
@@ -83,6 +82,67 @@ func resetHandler(s *state, cmd command) error {
 		return err
 	}
 
-	log.Println("Users successfully reset")
+	fmt.Println("Users successfully reset")
+	return nil
+}
+
+func aggHandler(s *state, cmd command) error {
+	feed, err := fetchFeed(context.Background(), "https://www.wagslane.dev/index.xml")
+	if err != nil {
+		return err
+	}
+
+	fmt.Println(feed)
+	return nil
+}
+
+func addFeedHandler(s *state, cmd command) error {
+	if len(cmd.args) < 2 {
+		return fmt.Errorf("missing feed name or url")
+	}
+	name := cmd.args[0]
+	url := cmd.args[1]
+
+	user, err := s.db.GetUserByName(context.Background(), s.cfg.CurrentUserName)
+	if err != nil {
+		return err
+	}
+
+	feed := database.CreateFeedParams{
+		ID: uuid.New(),
+		Name: name,
+		Url: url,
+		UserID: user.ID,
+		CreatedAt: time.Now(),
+		UpdatedAt: time.Now(),
+	}
+
+	newFeed, err := s.db.CreateFeed(context.Background(), feed)
+	if err != nil {
+		return err
+	}
+
+	fmt.Printf("Feed added: %v\n", newFeed)
+	return nil
+}
+
+func feedHandler(s *state, cmd command) error {
+	feeds, err := s.db.GetFeeds(context.Background())
+	if err != nil {
+		return err
+	}
+
+	fmt.Println("Feeds:")
+	for _, feed := range feeds {
+		userName, err := s.db.GetUserById(context.Background(), feed.UserID)
+		if err != nil {
+			userName.Name = "Error fetching user"
+		}
+		fmt.Printf("  Name: %v\n", feed.Name)
+		fmt.Printf("  URL: %v\n", feed.Url)
+		fmt.Printf("  User: %v\n", userName.Name)
+		fmt.Println("-----")
+	}
+
 	return nil
 }
\ No newline at end of file
diff --git a/internal/database/models.go b/internal/database/models.go
index a01df13..cb7d653 100644
--- a/internal/database/models.go
+++ b/internal/database/models.go
@@ -10,6 +10,15 @@ import (
 	"github.com/google/uuid"
 )
 
+type Feed struct {
+	ID        uuid.UUID
+	Name      string
+	Url       string
+	UserID    uuid.UUID
+	CreatedAt time.Time
+	UpdatedAt time.Time
+}
+
 type User struct {
 	ID        uuid.UUID
 	Name      string
diff --git a/internal/database/users.sql.go b/internal/database/users.sql.go
index c5d8a4c..10d48ba 100644
--- a/internal/database/users.sql.go
+++ b/internal/database/users.sql.go
@@ -42,6 +42,22 @@ func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, e
 	return i, err
 }
 
+const getUserById = `-- name: GetUserById :one
+SELECT id, name, created_at, updated_at FROM users WHERE id = $1
+`
+
+func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
+	row := q.db.QueryRowContext(ctx, getUserById, id)
+	var i User
+	err := row.Scan(
+		&i.ID,
+		&i.Name,
+		&i.CreatedAt,
+		&i.UpdatedAt,
+	)
+	return i, err
+}
+
 const getUserByName = `-- name: GetUserByName :one
 SELECT id, name, created_at, updated_at FROM users WHERE name = $1
 `
@@ -91,7 +107,7 @@ func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
 }
 
 const resetUsers = `-- name: ResetUsers :exec
-TRUNCATE TABLE users
+DELETE FROM users
 `
 
 func (q *Queries) ResetUsers(ctx context.Context) error {
diff --git a/main.go b/main.go
index 205462c..b836187 100644
--- a/main.go
+++ b/main.go
@@ -35,6 +35,9 @@ func main() {
 	cmds.register("register", registerHandler)
 	cmds.register("reset", resetHandler)
 	cmds.register("users", usersHandler)
+	cmds.register("agg", aggHandler)
+	cmds.register("addfeed", addFeedHandler)
+	cmds.register("feeds", feedHandler)
 
 	clArgs := os.Args
 	if len(clArgs) < 2 {
diff --git a/sql/queries/users.sql b/sql/queries/users.sql
index c7f1d81..cab1133 100644
--- a/sql/queries/users.sql
+++ b/sql/queries/users.sql
@@ -6,8 +6,11 @@ RETURNING *;
 -- name: GetUserByName :one
 SELECT * FROM users WHERE name = $1;
 
+-- name: GetUserById :one
+SELECT * FROM users WHERE id = $1;
+
 -- name: GetUsers :many
 SELECT * FROM users;
 
 -- name: ResetUsers :exec
-TRUNCATE TABLE users;
\ No newline at end of file
+DELETE FROM users;
\ No newline at end of file
